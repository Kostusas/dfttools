#!/usr/bin/env python
import argparse

parser = argparse.ArgumentParser(description = "Plots a band structure from a supported file")
parser.add_argument("-o", "--output", nargs = 1, help = "plotted band structure file name", metavar = "FILENAME")
parser.add_argument("-d", "--density", nargs = '?', help = "plot density of states", metavar = "FILENAME", const = True)
parser.add_argument("-f", "--fermi", nargs = 1, help = "Fermi level in eV", metavar = "VALUE")
parser.add_argument("-r", "--range", nargs = 2, help = "Energy range in eV", metavar = "VALUE")
parser.add_argument("file", help = "file with the band structure", metavar = "FILENAME")

options = parser.parse_args()

from dfttools.parsers.generic import ParseError
from dfttools.simple import parse

from numericalunits import eV

if not options.fermi is None:
    options.fermi = float(options.fermi[0])*eV

if not options.range is None:
    options.range = list(float(v) for v in options.range)
    
data = {}

for file_name, destination in ((options.file, "bands"), (options.density[0] if "__getitem__" in dir(options.density) else None, "density")):
    
    if not file_name is None:
            
        try:
            
            with open(file_name, 'r') as f:
                
                try:
                    bands = parse(f, 'band-structure')
                except ParseError:
                    print("Could not parse file '{}'\n".format(file_name))
                    raise
                
                if not options.fermi is None:
                    bands.meta["Fermi"] = options.fermi
                    
                data[destination] = bands
                
        except IOError:
            
            print("Could no read file '{}'\n".format(options.file))
            raise

try:
    from matplotlib import pyplot, gridspec
    from dfttools.presentation import matplotlib_bands, matplotlib_bands_density
except ImportError:
    print("Could not import matplotlib\n")
    raise

if not "density" in data:
    
    if options.density:
        
        matplotlib_bands_density(
            data["bands"],
            pyplot.gca(),
            200,
            orientation = "landscape",
            energy_range = options.range,
        )
        
    else:
        
        matplotlib_bands(
            data["bands"],
            pyplot.gca(),
            energy_range = options.range,
        )

else:
    
    fig = pyplot.figure(figsize = (12,9))
    gs = gridspec.GridSpec(1, 2, width_ratios=[3, 1])
    ax_left = pyplot.subplot(gs[0])
    ax_right = pyplot.subplot(gs[1], sharey = ax_left)

    matplotlib_bands(
        data["bands"],
        ax_left,
        energy_range = options.range,
    )
    
    matplotlib_bands_density(
        data["density"],
        ax_right,
        200,
        energy_range = ax_left.get_ylim(),
        orientation = "portrait",
    )

if not options.output is None:
    pyplot.savefig(options.output[0])
else:
    pyplot.show()
            
