#!/usr/bin/env python
import argparse

parser = argparse.ArgumentParser(description="Plots a band structure from a supported file")
parser.add_argument("-o", "--output", nargs=1, help="plotted band structure file name", metavar="FILENAME")
parser.add_argument("-d", "--density", nargs='?', help="plot density of states", metavar="FILENAME", const=True)
parser.add_argument("-f", "--fermi", nargs=1, help="Fermi level in eV", metavar="VALUE")
parser.add_argument("-0", "--fermi-origin", nargs='?', help="Set Fermi level to zero", const=True)
parser.add_argument("-e", "--range", nargs=2, help="Energy range in eV", metavar="VALUE")
parser.add_argument("-c", "--color", nargs=1, help="Color bands according to a scalar", metavar="FILENAME")
parser.add_argument("-m", "--cmap", nargs=1, help="Color map used for coloring bands", metavar="VALUE")
parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output")
parser.add_argument("file", help="file with the band structure", metavar="FILENAME")

options = parser.parse_args()

from dfttools.parsers.generic import ParseError
from dfttools.simple import parse

from numericalunits import eV
import numpy
    
def report(bands):
    
    fermi_present = bands.fermi is not None
    print("Fermi present: {}".format("yes" if fermi_present else "no"))
    
    if fermi_present:
        
        print("Fermi value: {:.6f}".format(bands.fermi/eV))
        
        vb = (bands.values < bands.fermi).sum(axis = -1)
        ref = vb.ravel()[0]
        
        if numpy.all(vb == ref):
            
            if ref < bands.values.shape[-1] and ref>0:
                
                cbb = bands.values[...,ref].min()
                vbt = bands.values[...,ref-1].max()
                print("Gap size: {:.6f} eV".format((cbb-vbt)/eV))
                
            else:
                
                print("Gap size unknown (not enough bands)")
                
        else:
            
            print("Gap absent")

if not options.fermi is None:
    options.fermi = float(options.fermi[0])*eV

if not options.range is None:
    options.range = list(float(v) for v in options.range)
    
data = {}

for file_name, destination in ((options.file, "bands"), (options.density[0] if "__getitem__" in dir(options.density) else None, "density")):
    
    if not file_name is None:
            
        try:
            
            with open(file_name, 'r') as f:
                
                try:
                    if options.verbose:
                        print("Parsing {} ...".format(file_name))
                        
                    bands = parse(f, 'band-structure')
                except ParseError:
                    print("Could not parse file '{}'\n".format(file_name))
                    raise
                
                if options.fermi is not None:
                    bands.fermi = options.fermi

                if options.fermi_origin:
                    bands.values -= bands.fermi
                    bands.fermi = 0
                
                data[destination] = bands
                
        except IOError:
            
            print("Could no read file '{}'\n".format(options.file))
            raise
            
        if options.verbose:
            report(bands)

if not options.color is None:
    with open(options.color[0],'r') as f:
        weights = parse(f, "basis-dependent", data["bands"]).values

else:
    weights = None

if not options.cmap is None:
    options.cmap = options.cmap[0]

try:
    from matplotlib import pyplot, gridspec
    from dfttools.presentation import matplotlib_bands, matplotlib_bands_density
except ImportError:
    print("Could not import matplotlib\n")
    raise

if not "density" in data:
    
    if options.density:
        
        if options.verbose:
            print("Plotting density only ...")
            
        matplotlib_bands_density(
            data["bands"],
            pyplot.gca(),
            200,
            orientation = "landscape",
            energy_range = options.range,
            method = 'optimal',
        )
        
    else:
        
        if options.verbose:
            print("Plotting bands only ...")
            
        plot = matplotlib_bands(
            data["bands"],
            pyplot.gca(),
            energy_range = options.range,
            weights_color = weights,
            cmap = options.cmap,
        )

        if not options.color is None:
            pyplot.colorbar(plot)

else:
    
    fig = pyplot.figure(figsize = (12,9))
    gs = gridspec.GridSpec(1, 2, width_ratios=[3, 1])
    ax_left = pyplot.subplot(gs[0])
    ax_right = pyplot.subplot(gs[1], sharey = ax_left)

    if options.verbose:
        print("Plotting bands (next: density) ...")
            
    plot = matplotlib_bands(
        data["bands"],
        ax_left,
        energy_range = options.range,
        weights_color = weights,
        cmap = options.cmap,
    )
    
    if options.verbose:
        print("Plotting density ...")
        
    matplotlib_bands_density(
        data["density"],
        ax_right,
        200,
        energy_range = ax_left.get_ylim(),
        orientation = "portrait",
        method = 'optimal',
    )

    if not options.color is None:
        pyplot.colorbar(plot)

if not options.output is None:
    pyplot.savefig(options.output[0])
else:
    pyplot.show()
    
